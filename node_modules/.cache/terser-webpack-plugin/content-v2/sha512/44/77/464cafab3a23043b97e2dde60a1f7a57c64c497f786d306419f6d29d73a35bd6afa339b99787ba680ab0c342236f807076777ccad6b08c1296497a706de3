{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{351:function(s,a,n){\"use strict\";n.r(a);var t=n(42),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"函数-变量-声明提升\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数-变量-声明提升\"}},[s._v(\"#\")]),s._v(\" 函数 & 变量 &声明提升\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"Js代码分为两个阶段：编译阶段和执行阶段\\n\\nJs代码的编译阶段会找到所有的声明，并用合适的作用域将它们关联起来。\\n\\n包括变量声明(var a)和函数声明(function a(){})在内的所有声明都会在代码被执行前的编译阶段首先被处理。\\n这个过程就好像变量声明和函数声明从他们代码中出现的位置被添加到最近执行环境的顶部，这个过程就叫做提升（hoisting）。\\n\\n只有声明操作会被提升，赋值和逻辑操作会被留在原地等待执行。\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"变量声明提升\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#变量声明提升\"}},[s._v(\"#\")]),s._v(\" 变量声明提升\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"var a = 1;\\nvar b = 2;\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\")])]),n(\"p\",[s._v(\"编译时，顺序如下：\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"var a;    //undefined\\nvar b;    //undefined\\na = 1;    //1\\nb = 2;    //2\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"函数声明3种方式\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数声明3种方式\"}},[s._v(\"#\")]),s._v(\" 函数声明3种方式\")]),s._v(\" \"),n(\"h3\",{attrs:{id:\"_1-函数表达式\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-函数表达式\"}},[s._v(\"#\")]),s._v(\" 1. 函数表达式\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[s._v(\"将函数定义为表达式语句（变量赋值，或，自调用形式）\")]),s._v(\" \"),n(\"li\",[s._v(\"命名，或，匿名函数\")]),s._v(\" \"),n(\"li\",[s._v(\"函数表达式存储在变量，或，对象属性中\")]),s._v(\" \"),n(\"li\",[s._v(\"（其实就是变量声明的一种，声明操作会被提升到执行环境顶部，并赋值undefined。赋值操作被留在原地等到执行）\")]),s._v(\" \"),n(\"li\",[s._v(\"函数末尾有一个分号\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"var f = function() {\\n      console.log(1);  \\n}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"_2-函数声明\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-函数声明\"}},[s._v(\"#\")]),s._v(\" 2. 函数声明\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[s._v(\"具名函数\")]),s._v(\" \"),n(\"li\",[s._v(\"function开头\")]),s._v(\" \"),n(\"li\",[s._v(\"进行变量提升，作用域内可以任意位置调用\")]),s._v(\" \"),n(\"li\",[s._v(\"（在编译阶段把声明和函数体整体都提前到执行环境顶部，所以我们可以在函数声明之前调用这个函数）\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"function f (){\\n     console.log(2);\\n}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"_3-function-构造器\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-function-构造器\"}},[s._v(\"#\")]),s._v(\" 3. Function()构造器\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[s._v(\"使用Function()构造器函数\")]),s._v(\" \"),n(\"li\",[s._v(\"会导致解析两次代码（第一次是解析常规的ES代码，第二次是解析传入构造函数中的字符串），从而影响性能\")]),s._v(\" \"),n(\"li\",[s._v(\"“ 函数是对象，函数名是指针 ”\")]),s._v(\" \"),n(\"li\",[s._v(\"不推荐\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('var sum = new Function(\"num1\",\"num2\",\"return num1 + num2\");   \\nsum(2,3);\\n\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"h1\",{attrs:{id:\"总结：声明的顺序：\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结：声明的顺序：\"}},[s._v(\"#\")]),s._v(\" 总结：声明的顺序：\")]),s._v(\" \"),n(\"ol\",[n(\"li\",[s._v(\"找到所有的函数声明，初始化函数体，如有同名的函数则会进行覆盖。\")]),s._v(\" \"),n(\"li\",[s._v(\"查找变量声明，初始化为undefined，如果已经存在同名的变量，就什么也不做直接略过。\")])])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}